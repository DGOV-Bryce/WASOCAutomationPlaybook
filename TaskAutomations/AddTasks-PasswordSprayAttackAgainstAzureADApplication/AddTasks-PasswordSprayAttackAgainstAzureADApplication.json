{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "existingWorkspaceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Sentinel workspace where the automation rule will be deployed"
            }
        }
    },
    "variables": {
        "automationRuleName": "AddTasks - Password spray attack against Azure AD application",
        "automationRuleGuid": "7ade4215-f8c7-435e-a3fd-028fbcc5ee40",
        "existingRuleId": "3abb1e23-3dae-4c58-b9d6-d3f6edc7a7bf"
    },
    "resources": [
        {
            "type": "Microsoft.SecurityInsights/automationRules",
            "name": "[variables('automationRuleGuid')]",
            "scope": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('existingWorkspaceName'))]",
            "apiVersion": "2022-12-01-preview",
            "properties": {
                "displayName": "[variables('automationRuleName')]",
                "order": 100,
                "triggeringLogic": {
                    "isEnabled": true,
                    "expirationTimeUtc": null,
                    "triggersOn": "Incidents",
                    "triggersWhen": "Created",
                    "conditions": [
                            {
                                "conditionType": "Property",
                                "conditionProperties": {
                                    "propertyName": "IncidentRelatedAnalyticRuleIds",
                                    "operator": "Contains",
                                    "propertyValues": [
                                        "[resourceId('Microsoft.OperationalInsights/workspaces/providers/alertRules',parameters('existingWorkspaceName'),'Microsoft.SecurityInsights',variables('existingRuleId'))]"
                                    ]
                                }
                            }
                    ]
                },
                "actions": [
                    {
                      "order": 1,
                      "actionType": "AddIncidentTask",
                      "actionConfiguration": {
                        "title": "Enrich IP Address(es)",
                        "description": "<div><strong>Double check the IP via enrichment</strong></div><div><br></div><div>Confirm whether the IP is malicious with tools such as:</div><ul><li><a href=\"https://www.abuseipdb.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Abuse IP DB</a></li><li><a href=\"https://www.ip2location.com/demo\" rel=\"noopener noreferrer\" target=\"_blank\">IP2Location</a></li><li><a href=\"https://ipinfo.io/\" rel=\"noopener noreferrer\" target=\"_blank\">IP Info</a></li><li><a href=\"https://www.virustotal.com/gui/home/search\" rel=\"noopener noreferrer\" target=\"_blank\">VirusTotal</a></li></ul>"
                      }
                    },
                    {
                      "order": 2,
                      "actionType": "AddIncidentTask",
                      "actionConfiguration": {
                        "title": "Check successful sign-ins from IP(s)",
                        "description": "<div><strong>Check over the successful sign-in attempts from the noted IP address(es)</strong> </div><div><br></div><div>A KQL command (substituting the IP(s) in place of XXX) to investigate this activity could be:</div><pre  spellcheck=\"false\">union SigninLogs, AADNonInteractiveUserSignInLogs\n| where IPAddress in (XXX)&nbsp; //('x.x.x.x','x.x.x.x',…)&nbsp;\n| where ResultType in (\"0\",\"50125\", \"50140\", \"53003\", \"70043\", \"70044\")&nbsp; &nbsp;// Only shows successes (or stopped corect creds; Comment line out to show all attempts)&nbsp;\n| project TimeGenerated, UserPrincipalName, IPAddress, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, Location, UserAgent, AuthenticationDetails, AuthenticationProcessingDetails&nbsp;\n| sort by TimeGenerated desc\n</pre><div><br></div><div>If wanting to pivot and check sign-in activity based on users, a KQL like the following can be used:</div><pre class=\"ql-syntax\" spellcheck=\"false\">union SigninLogs, AADNonInteractiveUserSignInLogs\n| where UserPrincipalName in (XXX)&nbsp; &nbsp; //(\"user@domain.wa.gov.au\", …)&nbsp;\n| where ResultType in (\"0\",\"50125\", \"50140\", \"53003\", \"70043\", \"70044\")&nbsp; &nbsp;// Only shows successes (or stopped corect creds; Comment line out to show all attempts&nbsp;\n| project TimeGenerated, UserPrincipalName, IPAddress, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, Location, UserAgent, AuthenticationDetails, AuthenticationProcessingDetails&nbsp;\n| sort by TimeGenerated desc\n</pre>"
                      }
                    },
                    {
                      "order": 3,
                      "actionType": "AddIncidentTask",
                      "actionConfiguration": {
                        "title": "Remediate (if required)",
                        "description": "<div>If malicious activity has occurred follow standard operating procedures for containment and remediation.</div><div><br></div><div>These would commonly involve steps such as:</div><ul><li>Reset affected credentials</li><li>Revoke active sessions</li><li>Other actions as required</li></ul>"
                      }
                    }
                ]
            }
        }
    ],
    "outputs": {}
}
